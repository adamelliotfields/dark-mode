((t,e)=>{class s{static KEY="dark";static DARK="dark";static TRANSITION="[&_*]:!transition-none";static THEMES=["dark","light","system"];el=e.documentElement;storage=t.localStorage;mediaQuery=t.matchMedia("(prefers-color-scheme: dark)");constructor(){this.initialize()}get theme(){let t=null;try{t=JSON.parse(this.storage.getItem(s.KEY)||"null")}catch{}return!0===t?"dark":!1===t?"light":"system"}set theme(t){"system"===t?this.storage.removeItem(s.KEY):this.storage.setItem(s.KEY,JSON.stringify("dark"===t))}get isDark(){return"dark"===this.theme||"system"===this.theme&&this.mediaQuery.matches}update(t=this.theme){this.theme=s.THEMES.includes(t)?t:"system",this.el.classList.toggle(s.DARK,this.isDark),this.el.setAttribute("data-theme",this.theme),this.el.classList.add(s.TRANSITION),setTimeout((()=>this.el.classList.remove(s.TRANSITION)),0)}initialize(){this.update();new MutationObserver((([t])=>{const e=t.target.getAttribute("data-theme");e!==t.oldValue&&this.update(e)})).observe(this.el,{attributeOldValue:!0,attributeFilter:["data-theme"]}),this.mediaQuery.addEventListener("change",(t=>this.update()))}}new s})(window,document);
